![run-tests](../../workflows/run-tests/badge.svg)

## 2021 Project 1

Εκφώνηση: https://k08.chatzi.org/projects/project1/

### Ασκήσεις που παραδίδονται

Συμπληρώστε εδώ τις ασκήσεις (και τυχόν bonus) που παραδίδετε. Αν κάποια άσκηση
βρίσκεται σε μη αναμενόμενα αρχεία αναφέρετε και τα αρχεία αυτά.

- Άσκηση 1
- Άσκηση 2
- Άσκηση 3
- Άσκηση 4
- Άσκηση 5
- Άσκηση 6

### Documentation
State.c
  state_objects:
    2 for loops όπου προσθέτουν όλα τα objects που βρίσκονται ανάμεσα στο y_from και στο y_to. Ο λόγος όμως που ειναι 2 και όχι 1, είναι επειδή το πρώτο
    είναι για όλα τα objects που δεν ειναι terain. Για τα οποία παίρνω από το y_from + 500. Ο λόγος που το κάνω αυτό είναι γιατί πριν κάνω αυτήν την
    αλλαγή έκαναν render πρώτα οι εχθροί και μετά το terain, αλλά μέχρι να κάνει render το terain οι αντίπαλοι είχαν φύγει εκτός bounds και είχαν κολλήσει
    μέσα στους τοίχους. Έτσι το μισό map κατέληγε να είναι άδειο. Έτσι με την αλλαγή αυτή των 2 loops
    σιγουρεύω ότι το terain θα κάνει πάντα render πρώτο και έτσι οι εχθροί δεν θα φεύγουν out of bounds.

  state_update:
    Οι πρώτες γραμμές ειναι πολύ self explanatory εφόσον χειρίζονται το movement του jet ακριβώς όπως ζητάει η εκφώνηση. Στην περίπτωση που πατηθεί space,     δημιουργείται ενα MISSILE type object και κάνει spawn ακριβώς μπροστά από το jet. Μετά φτιάχνω 2 λίστες στις οποίες διαχωρίζω τους εχθρούς απο το 
    terain. Αφου γεμίσω μία λίστα με τα objects από το y_from και y_to που ζητάω (τα οποία είναι ανάλογα με την θέση του jet) χρησιμοποιώ αυτήν την λίστα
    για να γεμίσω τις λίστες terains και enemies. Ταυτόχρονα, κοιτάω αν συγκρούεται κάτι με το jet, διότι έτσι κι'αλλιώς ότι και να συγκρουστεί με το jet
    θα κάνει το παιχνίδι να τελειώσει. Αν υπάρχει πύραυλος το συγκεκριμένο frame κοιτάμε για συγκρούσεις με τον πύραυλο και τους εχθρούς/terains. Αν ο
    πύραυλος συγκρουστεί με κάποιον εχθρο/terain αποδεσμεύουμε τη μνήμη που κρατούσε το missile object και ορίζουμε τον πύραυλο ως NULL.
    (το missile_collision είναι για sound στο interace). Αν συγκρουστεί με εχθρό, (HELICOPTER/WARHSIP/BRIDGE) το αφαιρούμε απο την λίστα και προσθέτουμε
    10 πόντους στο score (σε αντίθεση με αν ειναι terain). Αν παρόλα αυτα δεν έχουμε βρει συγκρουση προχωράει ο πύραυλος 10 pixels. Μετα χρησιμοποιούμε
    την λίστα enemies για να ρυθμίσουμε την κίνηση των αντιπάλων στο συγκεκριμένο frame. (που ακολουθει τους κανόνες της εκφώνσησης).
    Μετα χρησιμοποιούμε την λίστα enemies και την λίστα terains για να δούμε για συγκρούσεις ανάμεσα σε terain και εχθρούς. Αν γίνονται τέτοιες
    συγκρούσεις, οι εχθροί αλλάζουν κατεύθυνση και δεν φεύγουν μέσα στο terain. Παίρνουμε επίσης τις συντεταγμένες της τελεύταιας γέφυρας που έχει
    δημιουργηθεί και κοιτάμε αν είμαστε αρκετά κοντα ώστε να αρχίσουμε να προσθέτουμε νέα objects στην state->objects ώστε να είναι το map infinite.
    Ενημερώνουμε με την νέα τελευταία γέφυρα για όταν ξαναπροκύψει αυτή η περίπτωση και ανεβάζουμε την ταχύτητα του παιχνιδιού κατά 30%.
    Το state κοιτάει και για περιπτώσεις pause και game over οπού για το pause δεν μπορούν να αναφερθούν πολλά. Στο game over το state δεν καταστρέφεται
    αλλα γίνεται reset (για να αποφευχθούν leaks). Τέλος σιγουρευόμαστε ότι αν δεν παιχτεί καινούριο παιχνίδι, καλείται η state_destroy για να 
    απελευθερώσει όλη την δεσμευμένη μνήμη του state μαζί με τα objects και jet/missiles.
    
state_alt.c
  state_objects:
    Άλλαξα την state->objects απο λίστα σε set. Στην state->objects φτιάχνω 2 dummy objects με y y_from
    και y_to ανάλογα, εφόσον αυτό ειναι το πράγμα που θέλουμε για μέτρο σύγκρισης. Μέτα με την βοήθεια των συναρτήσεων του set_utils, βρίσκω τις 
    κοντινότερες τιμές σε αυτές τις συντεταγμένες και βρίσκω και τα nodes τους. Απο εκεί κάνω ενα for loop που αρχίζει και τελειώνει αναλόγως με τα 
    nodes που βρήκα προηγουμένως
    
  state_update:
    Τα button presses είναι ολόιδια με το state.c. Φτιάχνω ένα επιπλέον set με τους εχθρούς για να μπορέσω να τους προσθέσω την κίνηση. Φτιάχνω ένα set
    με terains για να μπορέσω να κάνω match τα terains στο map με τα bounds που φτιάχνω. Παρομοίως με το
    state.c χρησιμοποιω την συνάρτηση state_objects για να γεμίσω τα set enemies/terains. Ορίζω render distance για την κίνηση των εχθρών το πολύ 2 
    οθόνες.
    Φτιάχνω παρομοίως με την state_objects 2 dummies αλλα κρατάω το 1 για σκοπό πέρα από την σύγκριση στην compare_objects για να αποφευχθει το εξής 
    πρόβλημα.
    η set_find_eq_or_smaller ενημέρωνε πάντα μέχρι το προτελευταίο object μπροστά μου, οπότε κατέληγε πάντα το πρώτο object που έβρισκε στον άξονα y
    να έμενε ακίνητο το δευτερόλεπτο που έμενε τελευταίο. Γι'αυτό κράτησα το dummy που ειναι 2 οθόνες πίσω απο το jet να τρέχει πίσω του (δεν το βλέπει ο
    χρήστης εφόσον είναι εκτός οθόνης), ώστε πάντα ο τελευταίος αντίπαλος που θα βρεθεί οπου είναι και ο αντίπαλος στον οποίο σταματαέι η κίνηση ως προς
    x είναι το dummy που τρέχει πίσω από το jet. Μετά χρησιμοποιούμε το ίδιο render distance που ορίσαμε (με render_min και render_max για να κοιτάξουμε
    για συγκρούσεις με το jet, και για να κοιτάξουμε για συγκρούσεις μεταξύ πυραύλων και εχθρών. Η τελευταία αλλαγή γίνεται στον τρόπο που κοιτάμε που 
    πρεπει να κινούνται οι εχθροι, όπου αντί να κοιτάμε για το αν συγκρούονται με το terain , χρησιμοποιούμε το terain απο πριν για να ορίσουμε τα 
    "όρια" στα οποία μπορεί να κινείται ένας εχθρός. Χρησιμοποιόντας map αντιστοιχούμε τα 2 terain που ειναι στο ίδιο y, (δηλαδή τα matching αριστερα,
    και δεξιά terain). Aπο αυτά μπορούμε να δούμε πόσο χώρο πιάνουν στην οθόνη τα terain ώστε να ορίσουμε τον χώρο που απομένει για να μπορούν να
    κινούνται οι εχθροι. Τα υπόλοιπα είναι ολόιδια με το state.c    

Competition

Μέλη ομάδας για το design competition.
Κυριακή καλαμάρη, sdi2000255
Σωτήριος Σκανδάλης , sdi2000181
Ισίδωρος Καλαμάρης, sdi2000233

Αλλαγές και χρήσιμες πληροφορίες:
Στο παιχνίδι η κύρια αλλαγή που κάναμε ήταν να κάνουμε το "Τζετ" να πέφτει απο πάνω αντί να ανεβαίνει.Την αλλαγή αυτη 
την πραγματοποιήσαμε γιατί θέλαμε να υλοποιήσουμε το παιχνίδι μας βάση μιας σημαντικής σκηνής απο την animated ταινία "Spirited away"
του Studio Ghibli στην οποία οι πρωταγωνιστές πέφτουν απο τον ουρανό. Ως εχθρούς έχουμε βάλει χαρακτήρες απο την ταινία και Ως
terrain σύνεφα. Στη θέση πυράβλων έχουμε βάλει καποιους "βοηθούς" της ταινίας (μικρά πλάσματα που τους αρέσουν τα ζαχαρωτά
και βοηθάνε τους πρωταγωνιστές).Έχουμε αλλάξει το speed factor έτσι ώστε να αργεί να γίνει πιο γρήγορο το παιχνιδι. 


Background credits:
imgur link: https://imgur.com/cvTnR8o 

Pngs credits:
faceles_man : https://www.pngegg.com/en/png-tyvqh
haku and chihiro : https://www.pngegg.com/en/png-wlgrb
helpers : https://www.pngegg.com/en/png-izdwa
ubaba : https://www.pngfind.com/mpng/hwJimhi_spirited-away-yubaba-png-transparent-png/

mp3 sources : 
spirited away theme : "Joe Hisaishi- One Summer's day"  Youtube link:https://www.youtube.com/watch?v=TK1Ij_-mank  
hakuu : Το κάναμε cut απο το audio της ταινίας. Στη ταινία το κομμάτι αυτό είναι στο time stamp: 1:51:47 (english audio).

